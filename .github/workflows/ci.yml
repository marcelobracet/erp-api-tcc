name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  GO_VERSION: "1.23"
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job de validação e testes
  validate-and-test:
    name: Validate and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run linter
        run: |
          go install golang.org/x/lint/golint@latest
          golint -set_exit_status ./...

      - name: Run security scan
        run: |
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec ./...

      - name: Run unit tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: Run integration tests
        run: |
          docker-compose up -d postgres
          sleep 10
          go test -v -tags=integration ./...
          docker-compose down

  # Job de build e push da imagem
  build-and-push:
    name: Build and Push Docker Image
    needs: validate-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job de deploy para QA
  deploy-qa:
    name: Deploy to QA
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: qa

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to QA
        run: |
          echo "Deploying to QA environment..."
          # Aqui você adicionaria os comandos para deploy no seu ambiente QA
          # Exemplo: kubectl apply -f k8s/qa/
          echo "QA deployment completed"

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against QA environment..."
          # Aqui você adicionaria testes de fumaça
          # Exemplo: curl -f http://qa-api.seudominio.com/health

  # Job de deploy para Production
  deploy-prod:
    name: Deploy to Production
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Production
        run: |
          echo "Deploying to Production environment..."
          # Aqui você adicionaria os comandos para deploy no seu ambiente Production
          # Exemplo: kubectl apply -f k8s/prod/
          echo "Production deployment completed"

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against Production environment..."
          # Aqui você adicionaria testes de fumaça
          # Exemplo: curl -f http://api.seudominio.com/health
